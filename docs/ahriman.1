.TH AHRIMAN "1" "2023\-08\-07" "ahriman" "Generated Python Manual"
.SH NAME
ahriman
.SH SYNOPSIS
.B ahriman
[-h] [-a ARCHITECTURE] [-c CONFIGURATION] [--force] [-l LOCK] [--log-handler {console,syslog,journald}] [--report | --no-report] [-q] [--unsafe] [-V] {aur-search,search,help,help-commands-unsafe,help-updates,help-version,version,package-add,add,package-update,package-remove,remove,package-status,status,package-status-remove,package-status-update,status-update,patch-add,patch-list,patch-remove,patch-set-add,repo-backup,repo-check,check,repo-create-keyring,repo-create-mirrorlist,repo-daemon,daemon,repo-rebuild,rebuild,repo-remove-unknown,remove-unknown,repo-report,report,repo-restore,repo-sign,sign,repo-status-update,repo-sync,sync,repo-tree,repo-triggers,repo-update,update,service-clean,clean,repo-clean,service-config,config,repo-config,service-config-validate,config-validate,repo-config-validate,service-key-import,key-import,service-setup,init,repo-init,repo-setup,setup,service-shell,shell,user-add,user-list,user-remove,web} ...
.SH DESCRIPTION
ArcH linux ReposItory MANager

.SH OPTIONS
.TP
\fB\-a\fR \fI\,ARCHITECTURE\/\fR, \fB\-\-architecture\fR \fI\,ARCHITECTURE\/\fR
target architectures. For several subcommands it can be used multiple times

.TP
\fB\-c\fR \fI\,CONFIGURATION\/\fR, \fB\-\-configuration\fR \fI\,CONFIGURATION\/\fR
configuration path

.TP
\fB\-\-force\fR
force run, remove file lock

.TP
\fB\-l\fR \fI\,LOCK\/\fR, \fB\-\-lock\fR \fI\,LOCK\/\fR
lock file

.TP
\fB\-\-log\-handler\fR \fI\,{console,syslog,journald}\/\fR
explicit log handler specification. If none set, the handler will be guessed from environment

.TP
\fB\-\-report\fR, \fB\-\-no\-report\fR
force enable or disable reporting to web service

.TP
\fB\-q\fR, \fB\-\-quiet\fR
force disable any logging

.TP
\fB\-\-unsafe\fR
allow to run ahriman as non\-ahriman user. Some actions might be unavailable

.TP
\fB\-V\fR, \fB\-\-version\fR
show program's version number and exit

.SH
COMMAND
.TP
\fBahriman\fR \fI\,aur\-search\/\fR
search for package
.TP
\fBahriman\fR \fI\,help\/\fR
show help message
.TP
\fBahriman\fR \fI\,help\-commands\-unsafe\/\fR
list unsafe commands
.TP
\fBahriman\fR \fI\,help\-updates\/\fR
check for service updates
.TP
\fBahriman\fR \fI\,help\-version\/\fR
application version
.TP
\fBahriman\fR \fI\,package\-add\/\fR
add package
.TP
\fBahriman\fR \fI\,package\-remove\/\fR
remove package
.TP
\fBahriman\fR \fI\,package\-status\/\fR
get package status
.TP
\fBahriman\fR \fI\,package\-status\-remove\/\fR
remove package status
.TP
\fBahriman\fR \fI\,package\-status\-update\/\fR
update package status
.TP
\fBahriman\fR \fI\,patch\-add\/\fR
add patch for PKGBUILD function
.TP
\fBahriman\fR \fI\,patch\-list\/\fR
list patch sets
.TP
\fBahriman\fR \fI\,patch\-remove\/\fR
remove patch set
.TP
\fBahriman\fR \fI\,patch\-set\-add\/\fR
add patch set
.TP
\fBahriman\fR \fI\,repo\-backup\/\fR
backup repository data
.TP
\fBahriman\fR \fI\,repo\-check\/\fR
check for updates
.TP
\fBahriman\fR \fI\,repo\-create\-keyring\/\fR
create keyring package
.TP
\fBahriman\fR \fI\,repo\-create\-mirrorlist\/\fR
create mirrorlist package
.TP
\fBahriman\fR \fI\,repo\-daemon\/\fR
run application as daemon
.TP
\fBahriman\fR \fI\,repo\-rebuild\/\fR
rebuild repository
.TP
\fBahriman\fR \fI\,repo\-remove\-unknown\/\fR
remove unknown packages
.TP
\fBahriman\fR \fI\,repo\-report\/\fR
generate report
.TP
\fBahriman\fR \fI\,repo\-restore\/\fR
restore repository data
.TP
\fBahriman\fR \fI\,repo\-sign\/\fR
sign packages
.TP
\fBahriman\fR \fI\,repo\-status\-update\/\fR
update repository status
.TP
\fBahriman\fR \fI\,repo\-sync\/\fR
sync repository
.TP
\fBahriman\fR \fI\,repo\-tree\/\fR
dump repository tree
.TP
\fBahriman\fR \fI\,repo\-triggers\/\fR
run triggers
.TP
\fBahriman\fR \fI\,repo\-update\/\fR
update packages
.TP
\fBahriman\fR \fI\,service\-clean\/\fR
clean local caches
.TP
\fBahriman\fR \fI\,service\-config\/\fR
dump configuration
.TP
\fBahriman\fR \fI\,service\-config\-validate\/\fR
validate system configuration
.TP
\fBahriman\fR \fI\,service\-key\-import\/\fR
import PGP key
.TP
\fBahriman\fR \fI\,service\-setup\/\fR
initial service configuration
.TP
\fBahriman\fR \fI\,service\-shell\/\fR
invoke python shell
.TP
\fBahriman\fR \fI\,user\-add\/\fR
create or update user
.TP
\fBahriman\fR \fI\,user\-list\/\fR
user known users and their access
.TP
\fBahriman\fR \fI\,user\-remove\/\fR
remove user
.TP
\fBahriman\fR \fI\,web\/\fR
web server

.SH COMMAND \fI\,'ahriman aur\-search'\/\fR
usage: ahriman aur\-search [\-h] [\-e] [\-\-info | \-\-no\-info]
                          [\-\-sort\-by {description,first_submitted,id,last_modified,maintainer,name,num_votes,out_of_date,package_base,package_base_id,popularity,repository,submitter,url,url_path,version}]
                          search [search ...]

search for package in AUR using API

.TP
\fBsearch\fR
search terms, can be specified multiple times, the result will match all terms

.SH OPTIONS \fI\,'ahriman aur\-search'\/\fR
.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit status if result is empty

.TP
\fB\-\-info\fR, \fB\-\-no\-info\fR
show additional package information

.TP
\fB\-\-sort\-by\fR \fI\,{description,first_submitted,id,last_modified,maintainer,name,num_votes,out_of_date,package_base,package_base_id,popularity,repository,submitter,url,url_path,version}\/\fR
sort field by this field. In case if two packages have the same value of the specified field, they will be always sorted
by name

.SH COMMAND \fI\,'ahriman help'\/\fR
usage: ahriman help [\-h] [command]

show help message for application or command and exit

.TP
\fBcommand\fR
show help message for specific command

.SH COMMAND \fI\,'ahriman help\-commands\-unsafe'\/\fR
usage: ahriman help\-commands\-unsafe [\-h] [command ...]

list unsafe commands as defined in default args

.TP
\fBcommand\fR
instead of showing commands, just test command line for unsafe subcommand and return 0 in case if command is safe and 1
otherwise

.SH COMMAND \fI\,'ahriman help\-updates'\/\fR
usage: ahriman help\-updates [\-h] [\-e]

request AUR for current version and compare with current service version

.SH OPTIONS \fI\,'ahriman help\-updates'\/\fR
.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit code if updates available

.SH COMMAND \fI\,'ahriman help\-version'\/\fR
usage: ahriman help\-version [\-h]

print application and its dependencies versions

.SH COMMAND \fI\,'ahriman package\-add'\/\fR
usage: ahriman package\-add [\-h] [\-\-dependencies | \-\-no\-dependencies] [\-e] [\-n] [\-y]
                           [\-s {auto,archive,aur,directory,local,remote,repository}] [\-u USERNAME]
                           package [package ...]

add existing or new package to the build queue

.TP
\fBpackage\fR
package source (base name, path to local files, remote URL)

.SH OPTIONS \fI\,'ahriman package\-add'\/\fR
.TP
\fB\-\-dependencies\fR, \fB\-\-no\-dependencies\fR
process missing package dependencies

.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit status if result is empty

.TP
\fB\-n\fR, \fB\-\-now\fR
run update function after

.TP
\fB\-y\fR, \fB\-\-refresh\fR
download fresh package databases from the mirror before actions, \-yy to force refresh even if up to date

.TP
\fB\-s\fR \fI\,{auto,archive,aur,directory,local,remote,repository}\/\fR, \fB\-\-source\fR \fI\,{auto,archive,aur,directory,local,remote,repository}\/\fR
explicitly specify the package source for this command

.TP
\fB\-u\fR \fI\,USERNAME\/\fR, \fB\-\-username\fR \fI\,USERNAME\/\fR
build as user

.SH COMMAND \fI\,'ahriman package\-remove'\/\fR
usage: ahriman package\-remove [\-h] package [package ...]

remove package from the repository

.TP
\fBpackage\fR
package name or base

.SH COMMAND \fI\,'ahriman package\-status'\/\fR
usage: ahriman package\-status [\-h] [\-\-ahriman] [\-e] [\-\-info | \-\-no\-info] [\-s {unknown,pending,building,failed,success}]
                              [package ...]

request status of the package

.TP
\fBpackage\fR
filter status by package base

.SH OPTIONS \fI\,'ahriman package\-status'\/\fR
.TP
\fB\-\-ahriman\fR
get service status itself

.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit status if result is empty

.TP
\fB\-\-info\fR, \fB\-\-no\-info\fR
show additional package information

.TP
\fB\-s\fR \fI\,{unknown,pending,building,failed,success}\/\fR, \fB\-\-status\fR \fI\,{unknown,pending,building,failed,success}\/\fR
filter packages by status

.SH COMMAND \fI\,'ahriman package\-status\-remove'\/\fR
usage: ahriman package\-status\-remove [\-h] package [package ...]

remove the package from the status page

.TP
\fBpackage\fR
remove specified packages from status page

.SH COMMAND \fI\,'ahriman package\-status\-update'\/\fR
usage: ahriman package\-status\-update [\-h] [\-s {unknown,pending,building,failed,success}] [package ...]

update package status on the status page

.TP
\fBpackage\fR
set status for specified packages. If no packages supplied, service status will be updated

.SH OPTIONS \fI\,'ahriman package\-status\-update'\/\fR
.TP
\fB\-s\fR \fI\,{unknown,pending,building,failed,success}\/\fR, \fB\-\-status\fR \fI\,{unknown,pending,building,failed,success}\/\fR
new package build status

.SH COMMAND \fI\,'ahriman patch\-add'\/\fR
usage: ahriman patch\-add [\-h] package variable [patch]

create or update patched PKGBUILD function or variable

.TP
\fBpackage\fR
package base

.TP
\fBvariable\fR
PKGBUILD variable or function name. If variable is a function, it must end with ()

.TP
\fBpatch\fR
path to file which contains function or variable value. If not set, the value will be read from stdin

.SH COMMAND \fI\,'ahriman patch\-list'\/\fR
usage: ahriman patch\-list [\-h] [\-e] [\-v VARIABLE] [package]

list available patches for the package

.TP
\fBpackage\fR
package base

.SH OPTIONS \fI\,'ahriman patch\-list'\/\fR
.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit status if result is empty

.TP
\fB\-v\fR \fI\,VARIABLE\/\fR, \fB\-\-variable\fR \fI\,VARIABLE\/\fR
if set, show only patches for specified PKGBUILD variables

.SH COMMAND \fI\,'ahriman patch\-remove'\/\fR
usage: ahriman patch\-remove [\-h] [\-v VARIABLE] package

remove patches for the package

.TP
\fBpackage\fR
package base

.SH OPTIONS \fI\,'ahriman patch\-remove'\/\fR
.TP
\fB\-v\fR \fI\,VARIABLE\/\fR, \fB\-\-variable\fR \fI\,VARIABLE\/\fR
should be used for single\-function patches in case if you wold like to remove only specified PKGBUILD variables. In case
if not set, it will remove all patches related to the package

.SH COMMAND \fI\,'ahriman patch\-set\-add'\/\fR
usage: ahriman patch\-set\-add [\-h] [\-t TRACK] package

create or update source patches

.TP
\fBpackage\fR
path to directory with changed files for patch addition/update

.SH OPTIONS \fI\,'ahriman patch\-set\-add'\/\fR
.TP
\fB\-t\fR \fI\,TRACK\/\fR, \fB\-\-track\fR \fI\,TRACK\/\fR
files which has to be tracked

.SH COMMAND \fI\,'ahriman repo\-backup'\/\fR
usage: ahriman repo\-backup [\-h] path

backup repository settings and database

.TP
\fBpath\fR
path of the output archive

.SH COMMAND \fI\,'ahriman repo\-check'\/\fR
usage: ahriman repo\-check [\-h] [\-e] [\-\-vcs | \-\-no\-vcs] [\-y] [package ...]

check for packages updates. Same as repo\-update \-\-dry\-run \-\-no\-manual

.TP
\fBpackage\fR
filter check by package base

.SH OPTIONS \fI\,'ahriman repo\-check'\/\fR
.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit status if result is empty

.TP
\fB\-\-vcs\fR, \fB\-\-no\-vcs\fR
fetch actual version of VCS packages

.TP
\fB\-y\fR, \fB\-\-refresh\fR
download fresh package databases from the mirror before actions, \-yy to force refresh even if up to date

.SH COMMAND \fI\,'ahriman repo\-create\-keyring'\/\fR
usage: ahriman repo\-create\-keyring [\-h]

create package which contains list of trusted keys as set by configuration. Note, that this action will only create package, the package itself has to be built manually

.SH COMMAND \fI\,'ahriman repo\-create\-mirrorlist'\/\fR
usage: ahriman repo\-create\-mirrorlist [\-h]

create package which contains list of available mirrors as set by configuration. Note, that this action will only create package, the package itself has to be built manually

.SH COMMAND \fI\,'ahriman repo\-daemon'\/\fR
usage: ahriman repo\-daemon [\-h] [\-i INTERVAL] [\-\-aur | \-\-no\-aur] [\-\-dependencies | \-\-no\-dependencies]
                           [\-\-local | \-\-no\-local] [\-\-manual | \-\-no\-manual] [\-\-vcs | \-\-no\-vcs] [\-y]

start process which periodically will run update process

.SH OPTIONS \fI\,'ahriman repo\-daemon'\/\fR
.TP
\fB\-i\fR \fI\,INTERVAL\/\fR, \fB\-\-interval\fR \fI\,INTERVAL\/\fR
interval between runs in seconds

.TP
\fB\-\-aur\fR, \fB\-\-no\-aur\fR
enable or disable checking for AUR updates

.TP
\fB\-\-dependencies\fR, \fB\-\-no\-dependencies\fR
process missing package dependencies

.TP
\fB\-\-local\fR, \fB\-\-no\-local\fR
enable or disable checking of local packages for updates

.TP
\fB\-\-manual\fR, \fB\-\-no\-manual\fR
include or exclude manual updates

.TP
\fB\-\-vcs\fR, \fB\-\-no\-vcs\fR
fetch actual version of VCS packages

.TP
\fB\-y\fR, \fB\-\-refresh\fR
download fresh package databases from the mirror before actions, \-yy to force refresh even if up to date

.SH COMMAND \fI\,'ahriman repo\-rebuild'\/\fR
usage: ahriman repo\-rebuild [\-h] [\-\-depends\-on DEPENDS_ON] [\-\-dry\-run] [\-\-from\-database] [\-e]
                            [\-s {unknown,pending,building,failed,success}] [\-u USERNAME]

force rebuild whole repository

.SH OPTIONS \fI\,'ahriman repo\-rebuild'\/\fR
.TP
\fB\-\-depends\-on\fR \fI\,DEPENDS_ON\/\fR
only rebuild packages that depend on specified packages

.TP
\fB\-\-dry\-run\fR
just perform check for packages without rebuild process itself

.TP
\fB\-\-from\-database\fR
read packages from database instead of filesystem. This feature in particular is required in case if you would like to
restore repository from another repository instance. Note, however, that in order to restore packages you need to have
original ahriman instance run with web service and have run repo\-update at least once.

.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit status if result is empty

.TP
\fB\-s\fR \fI\,{unknown,pending,building,failed,success}\/\fR, \fB\-\-status\fR \fI\,{unknown,pending,building,failed,success}\/\fR
filter packages by status. Requires \-\-from\-database to be set

.TP
\fB\-u\fR \fI\,USERNAME\/\fR, \fB\-\-username\fR \fI\,USERNAME\/\fR
build as user

.SH COMMAND \fI\,'ahriman repo\-remove\-unknown'\/\fR
usage: ahriman repo\-remove\-unknown [\-h] [\-\-dry\-run]

remove packages which are missing in AUR and do not have local PKGBUILDs

.SH OPTIONS \fI\,'ahriman repo\-remove\-unknown'\/\fR
.TP
\fB\-\-dry\-run\fR
just perform check for packages without removal

.SH COMMAND \fI\,'ahriman repo\-report'\/\fR
usage: ahriman repo\-report [\-h]

generate repository report according to current settings

.SH COMMAND \fI\,'ahriman repo\-restore'\/\fR
usage: ahriman repo\-restore [\-h] [\-o OUTPUT] path

restore settings and database

.TP
\fBpath\fR
path of the input archive

.SH OPTIONS \fI\,'ahriman repo\-restore'\/\fR
.TP
\fB\-o\fR \fI\,OUTPUT\/\fR, \fB\-\-output\fR \fI\,OUTPUT\/\fR
root path of the extracted files

.SH COMMAND \fI\,'ahriman repo\-sign'\/\fR
usage: ahriman repo\-sign [\-h] [package ...]

(re\-)sign packages and repository database according to current settings

.TP
\fBpackage\fR
sign only specified packages

.SH COMMAND \fI\,'ahriman repo\-status\-update'\/\fR
usage: ahriman repo\-status\-update [\-h] [\-s {unknown,pending,building,failed,success}]

update repository status on the status page

.SH OPTIONS \fI\,'ahriman repo\-status\-update'\/\fR
.TP
\fB\-s\fR \fI\,{unknown,pending,building,failed,success}\/\fR, \fB\-\-status\fR \fI\,{unknown,pending,building,failed,success}\/\fR
new status

.SH COMMAND \fI\,'ahriman repo\-sync'\/\fR
usage: ahriman repo\-sync [\-h]

sync repository files to remote server according to current settings

.SH COMMAND \fI\,'ahriman repo\-tree'\/\fR
usage: ahriman repo\-tree [\-h]

dump repository tree based on packages dependencies

.SH COMMAND \fI\,'ahriman repo\-triggers'\/\fR
usage: ahriman repo\-triggers [\-h] [trigger ...]

run triggers on empty build result as configured by settings

.TP
\fBtrigger\fR
instead of running all triggers as set by configuration, just process specified ones in order of mention

.SH COMMAND \fI\,'ahriman repo\-update'\/\fR
usage: ahriman repo\-update [\-h] [\-\-aur | \-\-no\-aur] [\-\-dependencies | \-\-no\-dependencies] [\-\-dry\-run] [\-e]
                           [\-\-local | \-\-no\-local] [\-\-manual | \-\-no\-manual] [\-u USERNAME] [\-\-vcs | \-\-no\-vcs] [\-y]
                           [package ...]

check for packages updates and run build process if requested

.TP
\fBpackage\fR
filter check by package base

.SH OPTIONS \fI\,'ahriman repo\-update'\/\fR
.TP
\fB\-\-aur\fR, \fB\-\-no\-aur\fR
enable or disable checking for AUR updates

.TP
\fB\-\-dependencies\fR, \fB\-\-no\-dependencies\fR
process missing package dependencies

.TP
\fB\-\-dry\-run\fR
just perform check for updates, same as check command

.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit status if result is empty

.TP
\fB\-\-local\fR, \fB\-\-no\-local\fR
enable or disable checking of local packages for updates

.TP
\fB\-\-manual\fR, \fB\-\-no\-manual\fR
include or exclude manual updates

.TP
\fB\-u\fR \fI\,USERNAME\/\fR, \fB\-\-username\fR \fI\,USERNAME\/\fR
build as user

.TP
\fB\-\-vcs\fR, \fB\-\-no\-vcs\fR
fetch actual version of VCS packages

.TP
\fB\-y\fR, \fB\-\-refresh\fR
download fresh package databases from the mirror before actions, \-yy to force refresh even if up to date

.SH COMMAND \fI\,'ahriman service\-clean'\/\fR
usage: ahriman service\-clean [\-h] [\-\-cache | \-\-no\-cache] [\-\-chroot | \-\-no\-chroot] [\-\-manual | \-\-no\-manual]
                             [\-\-packages | \-\-no\-packages] [\-\-pacman | \-\-no\-pacman]

remove local caches

.SH OPTIONS \fI\,'ahriman service\-clean'\/\fR
.TP
\fB\-\-cache\fR, \fB\-\-no\-cache\fR
clear directory with package caches

.TP
\fB\-\-chroot\fR, \fB\-\-no\-chroot\fR
clear build chroot

.TP
\fB\-\-manual\fR, \fB\-\-no\-manual\fR
clear manually added packages queue

.TP
\fB\-\-packages\fR, \fB\-\-no\-packages\fR
clear directory with built packages

.TP
\fB\-\-pacman\fR, \fB\-\-no\-pacman\fR
clear directory with pacman local database cache

.SH COMMAND \fI\,'ahriman service\-config'\/\fR
usage: ahriman service\-config [\-h] [\-\-secure | \-\-no\-secure]

dump configuration for the specified architecture

.SH OPTIONS \fI\,'ahriman service\-config'\/\fR
.TP
\fB\-\-secure\fR, \fB\-\-no\-secure\fR
hide passwords and secrets from output

.SH COMMAND \fI\,'ahriman service\-config\-validate'\/\fR
usage: ahriman service\-config\-validate [\-h] [\-e]

validate configuration and print found errors

.SH OPTIONS \fI\,'ahriman service\-config\-validate'\/\fR
.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit status if configuration is invalid

.SH COMMAND \fI\,'ahriman service\-key\-import'\/\fR
usage: ahriman service\-key\-import [\-h] [\-\-key\-server KEY_SERVER] key

import PGP key from public sources to the repository user

.TP
\fBkey\fR
PGP key to import from public server

.SH OPTIONS \fI\,'ahriman service\-key\-import'\/\fR
.TP
\fB\-\-key\-server\fR \fI\,KEY_SERVER\/\fR
key server for key import

.SH COMMAND \fI\,'ahriman service\-setup'\/\fR
usage: ahriman service\-setup [\-h] [\-\-build\-as\-user BUILD_AS_USER] [\-\-build\-command BUILD_COMMAND]
                             [\-\-from\-configuration FROM_CONFIGURATION] [\-\-generate\-salt | \-\-no\-generate\-salt]
                             [\-\-makeflags\-jobs | \-\-no\-makeflags\-jobs] [\-\-mirror MIRROR] [\-\-multilib | \-\-no\-multilib]
                             \-\-packager PACKAGER \-\-repository REPOSITORY [\-\-sign\-key SIGN_KEY]
                             [\-\-sign\-target {disabled,packages,repository}] [\-\-web\-port WEB_PORT]
                             [\-\-web\-unix\-socket WEB_UNIX_SOCKET]

create initial service configuration, requires root

.SH OPTIONS \fI\,'ahriman service\-setup'\/\fR
.TP
\fB\-\-build\-as\-user\fR \fI\,BUILD_AS_USER\/\fR
force makepkg user to the specific one

.TP
\fB\-\-build\-command\fR \fI\,BUILD_COMMAND\/\fR
build command prefix

.TP
\fB\-\-from\-configuration\fR \fI\,FROM_CONFIGURATION\/\fR
path to default devtools pacman configuration

.TP
\fB\-\-generate\-salt\fR, \fB\-\-no\-generate\-salt\fR
generate salt for user passwords

.TP
\fB\-\-makeflags\-jobs\fR, \fB\-\-no\-makeflags\-jobs\fR
append MAKEFLAGS variable with parallelism set to number of cores

.TP
\fB\-\-mirror\fR \fI\,MIRROR\/\fR
use the specified explicitly mirror instead of including mirrorlist

.TP
\fB\-\-multilib\fR, \fB\-\-no\-multilib\fR
add or do not multilib repository

.TP
\fB\-\-packager\fR \fI\,PACKAGER\/\fR
packager name and email

.TP
\fB\-\-repository\fR \fI\,REPOSITORY\/\fR
repository name

.TP
\fB\-\-sign\-key\fR \fI\,SIGN_KEY\/\fR
sign key id

.TP
\fB\-\-sign\-target\fR \fI\,{disabled,packages,repository}\/\fR
sign options

.TP
\fB\-\-web\-port\fR \fI\,WEB_PORT\/\fR
port of the web service

.TP
\fB\-\-web\-unix\-socket\fR \fI\,WEB_UNIX_SOCKET\/\fR
path to unix socket used for interprocess communications

.SH COMMAND \fI\,'ahriman service\-shell'\/\fR
usage: ahriman service\-shell [\-h] [code]

drop into python shell

.TP
\fBcode\fR
instead of dropping into shell, just execute the specified code

.SH COMMAND \fI\,'ahriman user\-add'\/\fR
usage: ahriman user\-add [\-h] [\-\-key KEY] [\-\-packager PACKAGER] [\-p PASSWORD] [\-r {unauthorized,read,reporter,full}]
                        username

update user for web services with the given password and role. In case if password was not entered it will be asked interactively

.TP
\fBusername\fR
username for web service

.SH OPTIONS \fI\,'ahriman user\-add'\/\fR
.TP
\fB\-\-key\fR \fI\,KEY\/\fR
optional PGP key used by this user. The private key must be imported

.TP
\fB\-\-packager\fR \fI\,PACKAGER\/\fR
optional packager id used for build process in form of `Name Surname <mail@example.com>`

.TP
\fB\-p\fR \fI\,PASSWORD\/\fR, \fB\-\-password\fR \fI\,PASSWORD\/\fR
user password. Blank password will be treated as empty password, which is in particular must be used for OAuth2
authorization type.

.TP
\fB\-r\fR \fI\,{unauthorized,read,reporter,full}\/\fR, \fB\-\-role\fR \fI\,{unauthorized,read,reporter,full}\/\fR
user access level

.SH COMMAND \fI\,'ahriman user\-list'\/\fR
usage: ahriman user\-list [\-h] [\-e] [\-r {unauthorized,read,reporter,full}] [username]

list users from the user mapping and their roles

.TP
\fBusername\fR
filter users by username

.SH OPTIONS \fI\,'ahriman user\-list'\/\fR
.TP
\fB\-e\fR, \fB\-\-exit\-code\fR
return non\-zero exit status if result is empty

.TP
\fB\-r\fR \fI\,{unauthorized,read,reporter,full}\/\fR, \fB\-\-role\fR \fI\,{unauthorized,read,reporter,full}\/\fR
filter users by role

.SH COMMAND \fI\,'ahriman user\-remove'\/\fR
usage: ahriman user\-remove [\-h] username

remove user from the user mapping and update the configuration

.TP
\fBusername\fR
username for web service

.SH COMMAND \fI\,'ahriman web'\/\fR
usage: ahriman web [\-h]

start web server

.SH COMMENTS
Argument list can also be read from file by using @ prefix.

.SH AUTHOR
.nf
ahriman team
.fi
.nf

.fi

.SH DISTRIBUTION
The latest version of ahriman may be downloaded from
.UR https://github.com/arcan1s/ahriman
.UE
