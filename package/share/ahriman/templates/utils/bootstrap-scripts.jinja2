<script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js" crossorigin="anonymous" type="application/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/js-md5@0.8.3/src/md5.min.js" crossorigin="anonymous" type="application/javascript"></script>

<script src="https://cdn.jsdelivr.net/npm/tableexport.jquery.plugin@1.30.0/tableExport.min.js" crossorigin="anonymous" type="application/javascript"></script>

<script src="https://cdn.jsdelivr.net/npm/jquery-resizable-columns@0.2.3/dist/jquery.resizableColumns.min.js" crossorigin="anonymous" type="application/javascript"></script>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" crossorigin="anonymous" type="application/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" crossorigin="anonymous" type="application/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-table@1.23.2/dist/bootstrap-table.min.js" crossorigin="anonymous" type="application/javascript"></script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap-table@1.23.2/dist/extensions/export/bootstrap-table-export.min.js" crossorigin="anonymous" type="application/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-table@1.23.2/dist/extensions/resizable/bootstrap-table-resizable.js" crossorigin="anonymous" type="application/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-table@1.23.2/dist/extensions/filter-control/bootstrap-table-filter-control.js" crossorigin="anonymous" type="application/javascript"></script>

<script src="https://cdn.jsdelivr.net/npm/@easepick/bundle@1.2.1/dist/index.umd.min.js" crossorigin="anonymous" type="application/javascript"></script>

<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.10.0/build/highlight.min.js" crossorigin="anonymous" type="application/javascript"></script>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js" crossorigin="anonymous" type="application/javascript"></script>

<script>
    async function copyToClipboard(text, button) {
        await navigator.clipboard.writeText(text);
        button.innerHTML = "<i class=\"bi bi-clipboard-check\"></i> copied";
        setTimeout(_ => {
            button.innerHTML = "<i class=\"bi bi-clipboard\"></i> copy";
        }, 2000);
    }

    function extractDataList(data, column) {
        const elements = data.flatMap(row => row[column].split("<br>")).filter(v => v); // remove empty elements from array
        return Array.from(new Set(elements)).sort();
    }

    function extractListProperties(description, property) {
        return Object.values(description.packages)
            .map(pkg => pkg[property])
            .reduce((left, right) => left.concat(right), []);
    }

    function filterContains(text, value) {
        return value.includes(text.toLowerCase().trim());
    }

    function filterDateRange(text, value) {
        const asOfStartOfDay = date => date.setUTCHours(0, 0, 0, 0);

        const [minDate, maxDate] = text.split(" - ");
        const buildDate = asOfStartOfDay(new Date(value));

        return (buildDate >= new Date(minDate)) && (buildDate <= new Date(maxDate));
    }

    function filterList(index, value, field, data) {
        const dataList = extractDataList(data, field);
        // the library removes all symbols from string, so it is just string
        return value.includes(dataList[index].toLowerCase());
    }

    function hasActiveSelection() {
        return !document.getSelection().isCollapsed; // not sure if it is a valid way, but I guess so
    }

    function headerClass(status) {
        if (status === "pending") return ["bg-warning"];
        if (status === "building") return ["bg-warning"];
        if (status === "failed") return ["bg-danger", "text-white"];
        if (status === "success") return ["bg-success", "text-white"];
        return ["bg-secondary", "text-white"];
    }

    function listToTable(data) {
        return Array.from(new Set(data))
            .sort()
            .map(entry => safe(entry))
            .join("<br>");
    }

    function makeRequest(url, params, onSuccess, onFailure) {
        const requestParams = {
            method: params.method,
            body: params.json ? JSON.stringify(params.json) : params.json,
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
            },
        };
        if (params.query) {
            const query = new URLSearchParams(params.query);
            url += `?${query.toString()}`;
        }
        const convert = params.convert ?? (response => response.text());

        return fetch(url, requestParams)
            .then(response => {
                if (response.ok) {
                    return convert(response);
                } else {
                    const error = new Error("Network request error");
                    error.status = response.status;
                    error.statusText = response.statusText;
                    return response.text().then(text => {
                        error.text = text;
                        throw error;
                    });
                }
            })
            .then(data => onSuccess && onSuccess(data))
            .catch(error => onFailure && onFailure(error));
    }

    function ready(fn) {
        if (document.readyState === "complete" || document.readyState === "interactive") {
            setTimeout(fn, 1);
        } else {
            document.addEventListener("DOMContentLoaded", fn);
        }
    }

    function safe(string) {
        return String(string)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;");
    }

    // because I'm tired of safe element generation
    function safeLink(url, text, title) {
        const element = document.createElement("a");
        element.href = url;
        element.innerText = text;
        if (title) {
            element.title = title;
        }
        return element;
    }

    function toggleAutoReload(toggle, interval, intervalSelector, callback) {
        if (interval) {
            toggle.checked = true; // toggle reload
        } else {
            interval = intervalSelector.querySelector(".active")?.dataset?.interval; // find active element
        }

        if (interval) {
            if (toggle.checked) {
                // refresh UI
                Array.from(intervalSelector.children).forEach(il => {
                    Array.from(il.children).forEach(el => el.classList.remove("active"));
                });
                intervalSelector.querySelector(`a[data-interval="${interval}"]`)?.classList?.add("active");
                // finally create timer task
                return setInterval(callback, interval);
            }
        } else {
            toggle.checked = false; // no active interval found, disable toggle
        }

        return null; // return null to assign to keep method sane
    }

    Date.prototype.toISOStringShort = function() {
        const pad = number => String(number).padStart(2, "0");
        return `${this.getFullYear()}-${pad(this.getMonth() + 1)}-${pad(this.getDate())} ${pad(this.getHours())}:${pad(this.getMinutes())}:${pad(this.getSeconds())}`;
    }
</script>
